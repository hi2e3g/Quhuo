import os
import pandas as pd
from pandas import DataFrame as df
import dask.dataframe as dd
import zipfile

# 构建解压程序
def check_zip(path):
    for w in os.walk(path):
        for f in w[2]:
            file_name = w[0] + '\\' + f
            way_name, typ = os.path.splitext(file_name)
            if typ == '.zip':
                print(file_name)
                extracting = zipfile.ZipFile(file_name)
                extracting.extractall(way_name)


def check_file(path, header=0):
    out_put, all_size = df(), 0
    for w in os.walk(path):
        # w 相当于root, dirs,files.thus w[2]=files
        for f in w[2]:
            # file_name is file's path
            file_name = os.path.join(w[0],f)
            # splitext divide the target into two parts by name and suffix
            way_name, typ = os.path.splitext(file_name)
            if typ == '.xlsx':
                _file = pd.read_excel(file_name, header=header)
                out_put = pd.concat([out_put, _file])
            elif typ == '.xls':
                _file = pd.read_excel(file_name, header=header)
                out_put = pd.concat([out_put, _file])
            elif typ == '.csv':
                _file = dd.read_csv(file_name, header=header)
                out_put = dd.concat([out_put, _file])
                # out_put.to_csv('/Users/mahongtao/Downloads/tests/' + f)
            else:
                _file = df()
            # out_put.to_csv('/Users/mahongtao/Downloads/tests/' + f)
            print(file_name)
    return out_put


def read_file(read_path=None, output_path=None, header=0):
    # 这一步没有大用处。表示输入路径为空时，默认在本地执行路径执行
    if read_path is None:
        read_path = os.getcwd()
    if output_path is None:
        output_path = os.getcwd() + '\out_table.csv'
    check_zip(read_path)
    files = check_file(read_path, header)
    # out_df = files[['团队ID', '团队名称', '骑手ID', '骑手名称', '运单号']].groupby(['团队ID', '团队名称', '骑手ID', '骑手名称']).sum()
    out_df = compute_order(files).compute()
    out_df.rename(columns=({'运单号': '完成单量'}), inplace=True)
    out_df.to_csv(output_path)
    # print('the all data size: ', files)


def compute_order(_df):
    _df = _df[
        (_df['详情'] != '异常单-用户取消') &
        (_df['详情'] != '异常单-配送超时，系统标记异常') &
        (_df['详情'] != '异常单-用户退单') &
        (_df['详情'] != '异常单-用户地址错误') &
        (_df['详情'] != '异常单-用户不接电话') &
        (_df['详情'] != '异常单-超出服务范围')
    ]
    _df = _df[['团队ID', '团队名称', '骑手ID', '骑手名称', '运单号']]
    out_df = _df.groupby(['团队ID', '团队名称', '骑手ID', '骑手名称']).count()
    # out_df.rename(columns=({'运单号': '完成单量'}), inplace=True)
    return out_df



if __name__ == '__main__':
    #数据源是配送费，可以是压缩包，可以直接是文件
    read_file(read_path=r'F:\111111111',
              output_path='E:\\关佩文任务\\每月最后一个周五提供任思敏数据\\3月饿了么骑手单量统计.csv'
              )
    # read_file(read_path='/Users/mahongtao/Downloads/1-28配送费账单',
    #           output_path='/Users/mahongtao/Downloads/tests/test_order.csv'
    #           )
